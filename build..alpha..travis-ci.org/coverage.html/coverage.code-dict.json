{"/home/travis/build/npmtest/node-npmtest-raven/test.js":"/* istanbul instrument in package npmtest_raven */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - init-after\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - init-after\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-raven/lib.npmtest_raven.js":"/* istanbul instrument in package npmtest_raven */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_raven = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_raven = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-raven/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-raven && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_raven */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_raven\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // init-after\n    // run browser js-env code - init-after\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_raven.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_raven.rollup.js'] =\n            local.assetsDict['/assets.npmtest_raven.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_raven.__dirname + '/lib.npmtest_raven.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-raven/node_modules/raven/index.js":"'use strict';\n\nmodule.exports = require('./lib/client');\nmodule.exports.utils = require('./lib/utils');\nmodule.exports.middleware = {\n  connect: require('./lib/middleware/connect')\n};\n// friendly alias for \"raven.middleware.express\"\nmodule.exports.middleware.express = module.exports.middleware.connect;\nmodule.exports.transports = require('./lib/transports');\nmodule.exports.parsers = require('./lib/parsers');\n\n// To infinity and beyond\nError.stackTraceLimit = Infinity;\n","/home/travis/build/npmtest/node-npmtest-raven/node_modules/raven/lib/client.js":"'use strict';\n\nvar stringify = require('json-stringify-safe');\nvar parsers = require('./parsers');\nvar zlib = require('zlib');\nvar utils = require('./utils');\nvar uuid = require('uuid');\nvar transports = require('./transports');\nvar nodeUtil = require('util'); // nodeUtil to avoid confusion with \"utils\"\nvar events = require('events');\nvar domain = require('domain');\nvar autoBreadcrumbs = require('./breadcrumbs');\n\nvar extend = utils.extend;\n\nfunction Raven() {\n  this.breadcrumbs = {\n    record: this.captureBreadcrumb.bind(this)\n  };\n}\n\nnodeUtil.inherits(Raven, events.EventEmitter);\n\nextend(Raven.prototype, {\n  config: function config(dsn, options) {\n    // We get lots of users using raven-node when they want raven-js, hence this warning if it seems like a browser\n    if (typeof window !== 'undefined' && typeof document !== 'undefined' && typeof navigator !== 'undefined') {\n      utils.consoleAlertOnce('This looks like a browser environment; are you sure you don\\'t want Raven.js for browser JavaScript? https://sentry.io/for/javascript');\n    }\n\n    if (arguments.length === 0) {\n      // no arguments, use default from environment\n      dsn = process.env.SENTRY_DSN;\n      options = {};\n    }\n    if (typeof dsn === 'object') {\n      // They must only be passing through options\n      options = dsn;\n      dsn = process.env.SENTRY_DSN;\n    }\n    options = options || {};\n\n    this.raw_dsn = dsn;\n    this.dsn = utils.parseDSN(dsn);\n    this.name = options.name || process.env.SENTRY_NAME || require('os').hostname();\n    this.root = options.root || process.cwd();\n    this.transport = options.transport || transports[this.dsn.protocol];\n    this.release = options.release || process.env.SENTRY_RELEASE || '';\n    this.environment = options.environment || process.env.SENTRY_ENVIRONMENT || '';\n\n    // autoBreadcrumbs: true enables all, autoBreadcrumbs: false disables all\n    // autoBreadcrumbs: { http: true } enables a single type\n    // this procedure will ensure that this.autoBreadcrumbs is an object populated\n    // with keys -> bools reflecting actual status of all breadcrumb types\n    var autoBreadcrumbDefaults = {\n      console: false,\n      http: false,\n      pg: false\n    };\n    // default to 30, don't allow higher than 100\n    this.maxBreadcrumbs = Math.max(0, Math.min(options.maxBreadcrumbs || 30, 100));\n    this.autoBreadcrumbs = extend({}, autoBreadcrumbDefaults);\n    if (typeof options.autoBreadcrumbs !== 'undefined') {\n      for (var key in autoBreadcrumbDefaults) {\n        if (autoBreadcrumbDefaults.hasOwnProperty(key)) {\n          if (typeof options.autoBreadcrumbs === 'boolean') {\n            this.autoBreadcrumbs[key] = options.autoBreadcrumbs;\n          } else if (typeof options.autoBreadcrumbs[key] === 'boolean') {\n            this.autoBreadcrumbs[key] = options.autoBreadcrumbs[key];\n          }\n        }\n      }\n    }\n\n    this.captureUnhandledRejections = options.captureUnhandledRejections;\n    this.loggerName = options.logger || '';\n    this.dataCallback = options.dataCallback;\n    this.shouldSendCallback = options.shouldSendCallback;\n    this.sampleRate = typeof options.sampleRate === 'undefined' ? 1 : options.sampleRate;\n    this.parseUser = options.parseUser;\n\n    if (!this.dsn) {\n      utils.consoleAlert('no DSN provided, error reporting disabled');\n    }\n\n    if (this.dsn.protocol === 'https') {\n      // In case we want to provide our own SSL certificates / keys\n      this.ca = options.ca || null;\n    }\n\n    // enabled if a dsn is set\n    this._enabled = !!this.dsn;\n\n    var globalContext = this._globalContext = {};\n    if (options.tags) {\n      globalContext.tags = options.tags;\n    }\n    if (options.extra) {\n      globalContext.extra = options.extra;\n    }\n\n    this.on('error', function (err) {\n      utils.consoleAlert('failed to send exception to sentry: ' + err.message);\n    });\n\n    return this;\n  },\n\n  install: function install(opts, cb) {\n    if (this.installed) return this;\n\n    if (typeof opts === 'function') {\n      cb = opts;\n    }\n\n    registerExceptionHandler(this, cb);\n    if (this.captureUnhandledRejections) {\n      registerRejectionHandler(this, cb);\n    }\n\n    for (var key in this.autoBreadcrumbs) {\n      if (this.autoBreadcrumbs.hasOwnProperty(key)) {\n        this.autoBreadcrumbs[key] && autoBreadcrumbs.instrument(key, this);\n      }\n    }\n\n    this.installed = true;\n\n    return this;\n  },\n\n  uninstall: function uninstall() {\n    if (!this.installed) return this;\n\n    autoBreadcrumbs.restoreOriginals();\n\n    // todo: this works for tests for now, but isn't what we ultimately want to be doing\n    process.removeAllListeners('uncaughtException');\n    process.removeAllListeners('unhandledRejection');\n\n    this.installed = false;\n\n    return this;\n  },\n\n  generateEventId: function generateEventId() {\n    return uuid().replace(/-/g, '');\n  },\n\n  process: function process(eventId, kwargs, cb) {\n    // prod codepaths shouldn't hit this branch, for testing\n    if (typeof eventId === 'object') {\n      cb = kwargs;\n      kwargs = eventId;\n      eventId = this.generateEventId();\n    }\n\n    var domainContext = domain.active && domain.active.sentryContext || {};\n    kwargs.user = extend({}, this._globalContext.user, domainContext.user, kwargs.user);\n    kwargs.tags = extend({}, this._globalContext.tags, domainContext.tags, kwargs.tags);\n    kwargs.extra = extend({}, this._globalContext.extra, domainContext.extra, kwargs.extra);\n    kwargs.breadcrumbs = {\n      values: domainContext.breadcrumbs || this._globalContext.breadcrumbs || []\n    };\n\n    kwargs.modules = utils.getModules();\n    kwargs.server_name = kwargs.server_name || this.name;\n\n    if (typeof process.version !== 'undefined') {\n      kwargs.extra.node = process.version;\n    }\n\n    kwargs.environment = kwargs.environment || this.environment;\n    kwargs.logger = kwargs.logger || this.loggerName;\n    kwargs.event_id = eventId;\n    kwargs.timestamp = new Date().toISOString().split('.')[0];\n    kwargs.project = this.dsn.project_id;\n    kwargs.platform = 'node';\n\n    // Only include release information if it is set\n    if (this.release) {\n      kwargs.release = this.release;\n    }\n\n    if (this.dataCallback) {\n      kwargs = this.dataCallback(kwargs);\n    }\n\n    var shouldSend = true;\n    if (!this._enabled) shouldSend = false;\n    if (this.shouldSendCallback && !this.shouldSendCallback(kwargs)) shouldSend = false;\n    if (Math.random() >= this.sampleRate) shouldSend = false;\n\n    if (shouldSend) {\n      this.send(kwargs, cb);\n    } else {\n      // wish there was a good way to communicate to cb why we didn't send; worth considering cb api change?\n      // could be shouldSendCallback, could be disabled, could be sample rate\n      // avoiding setImmediate here because node 0.8\n      cb && setTimeout(function () {\n        cb(null, eventId);\n      }, 0);\n    }\n  },\n\n  send: function send(kwargs, cb) {\n    var self = this;\n    var skwargs = stringify(kwargs);\n    var eventId = kwargs.event_id;\n\n    zlib.deflate(skwargs, function (err, buff) {\n      var message = buff.toString('base64'),\n          timestamp = new Date().getTime(),\n          headers = {\n            'X-Sentry-Auth': utils.getAuthHeader(timestamp, self.dsn.public_key, self.dsn.private_key),\n            'Content-Type': 'application/octet-stream',\n            'Content-Length': message.length\n          };\n\n      self.transport.send(self, message, headers, eventId, cb);\n    });\n  },\n\n  captureMessage: function captureMessage(message, kwargs, cb) {\n    if (!cb && typeof kwargs === 'function') {\n      cb = kwargs;\n      kwargs = {};\n    } else {\n      kwargs = kwargs || {};\n    }\n    var eventId = this.generateEventId();\n    this.process(eventId, parsers.parseText(message, kwargs), cb);\n\n    return eventId;\n  },\n\n  captureException: function captureException(err, kwargs, cb) {\n    if (!(err instanceof Error)) {\n      // This handles when someone does:\n      //   throw \"something awesome\";\n      // We synthesize an Error here so we can extract a (rough) stack trace.\n      err = new Error(err);\n    }\n\n    if (!cb && typeof kwargs === 'function') {\n      cb = kwargs;\n      kwargs = {};\n    } else {\n      kwargs = kwargs || {};\n    }\n\n    var self = this;\n    var eventId = this.generateEventId();\n    parsers.parseError(err, kwargs, function (kw) {\n      self.process(eventId, kw, cb);\n    });\n\n    return eventId;\n  },\n\n  /* The onErr param here is sort of ugly and won't typically be used\n   * but it lets us write the requestHandler middleware in terms of this function.\n   * We could consider getting rid of it and just duplicating the domain\n   * instantiation etc logic in the requestHandler middleware\n   */\n  context: function (ctx, func, onErr) {\n    if (!func && typeof ctx === 'function') {\n      func = ctx;\n      ctx = {};\n    }\n\n    // todo/note: raven-js takes an args param to do apply(this, args)\n    // i don't think it's correct/necessary to bind this to the wrap call\n    // and i don't know if we need to support the args param; it's undocumented\n    return this.wrap(ctx, func, onErr).apply(null);\n  },\n\n  wrap: function (options, func, onErr) {\n    if (!func && typeof options === 'function') {\n      func = options;\n      options = {};\n    }\n\n    var wrapDomain = domain.create();\n    // todo: better property name than sentryContext, maybe __raven__ or sth?\n    wrapDomain.sentryContext = options;\n\n    var self = this;\n    if (typeof onErr !== 'function') {\n      onErr = function (err) {\n        self.captureException(err);\n      };\n    }\n\n    wrapDomain.on('error', onErr);\n    var wrapped = wrapDomain.bind(func);\n\n    for (var property in func) {\n      if ({}.hasOwnProperty.call(func, property)) {\n        wrapped[property] = func[property];\n      }\n    }\n    wrapped.prototype = func.prototype;\n    wrapped.__raven__ = true;\n    wrapped.__inner__ = func;\n    // note: domain.bind sets wrapped.domain, but it's not documented, unsure if we should rely on that\n    wrapped.__domain__ = wrapDomain;\n\n    return wrapped;\n  },\n\n  interceptErr: function (options, func) {\n    if (!func && typeof options === 'function') {\n      func = options;\n      options = {};\n    }\n    var self = this;\n    var wrapped = function () {\n      var err = arguments[0];\n      if (err instanceof Error) {\n        self.captureException(err, options);\n      } else {\n        func.apply(null, arguments);\n      }\n    };\n\n    // repetitive with wrap\n    for (var property in func) {\n      if ({}.hasOwnProperty.call(func, property)) {\n        wrapped[property] = func[property];\n      }\n    }\n    wrapped.prototype = func.prototype;\n    wrapped.__raven__ = true;\n    wrapped.__inner__ = func;\n\n    return wrapped;\n  },\n\n  setContext: function setContext(ctx) {\n    if (domain.active) {\n      domain.active.sentryContext = ctx;\n    } else {\n      this._globalContext = ctx;\n    }\n    return this;\n  },\n\n  mergeContext: function mergeContext(ctx) {\n    extend(this.getContext(), ctx);\n    return this;\n  },\n\n  getContext: function getContext() {\n    if (domain.active) {\n      if (!domain.active.sentryContext) {\n        domain.active.sentryContext = {};\n        utils.consoleAlert('sentry context not found on active domain');\n      }\n      return domain.active.sentryContext;\n    }\n    return this._globalContext;\n  },\n\n  setCallbackHelper: function (propertyName, callback) {\n    var original = this[propertyName];\n    if (typeof callback === 'function') {\n      this[propertyName] = function (data) {\n        return callback(data, original);\n      };\n    } else {\n      this[propertyName] = callback;\n    }\n\n    return this;\n  },\n\n  /*\n   * Set the dataCallback option\n   *\n   * @param {function} callback The callback to run which allows the\n   *                            data blob to be mutated before sending\n   * @return {Raven}\n   */\n  setDataCallback: function (callback) {\n    return this.setCallbackHelper('dataCallback', callback);\n  },\n\n  /*\n   * Set the shouldSendCallback option\n   *\n   * @param {function} callback The callback to run which allows\n   *                            introspecting the blob before sending\n   * @return {Raven}\n   */\n  setShouldSendCallback: function (callback) {\n    return this.setCallbackHelper('shouldSendCallback', callback);\n  },\n\n  requestHandler: function () {\n    var self = this;\n    return function (req, res, next) {\n      self.context({}, function () {\n        domain.active.add(req);\n        domain.active.add(res);\n        next();\n      }, next);\n    };\n  },\n\n  errorHandler: function () {\n    var self = this;\n    return function (err, req, res, next) {\n      var status = err.status || err.statusCode || err.status_code || 500;\n\n      // skip anything not marked as an internal server error\n      if (status < 500) return next(err);\n\n      var kwargs = parsers.parseRequest(req, self.parseUser);\n      var eventId = self.captureException(err, kwargs);\n      res.sentry = eventId;\n      return next(err);\n    };\n  },\n\n  captureBreadcrumb: function (breadcrumb) {\n    // Avoid capturing global-scoped breadcrumbs before instrumentation finishes\n    if (!this.installed) return;\n\n    breadcrumb = extend({\n      timestamp: +new Date / 1000\n    }, breadcrumb);\n\n    var currCtx = this.getContext();\n    if (!currCtx.breadcrumbs) currCtx.breadcrumbs = [];\n    currCtx.breadcrumbs.push(breadcrumb);\n    if (currCtx.breadcrumbs.length > this.maxBreadcrumbs) {\n      currCtx.breadcrumbs.shift();\n    }\n\n    this.setContext(currCtx);\n  }\n});\n\n// Deprecations\nextend(Raven.prototype, {\n  getIdent: function getIdent(result) {\n    utils.consoleAlertOnce('getIdent has been deprecated and will be removed in v2.0');\n    return result;\n  },\n  captureError: function captureError() {\n    utils.consoleAlertOnce('captureError has been deprecated and will be removed in v2.0; use captureException instead');\n    return this.captureException.apply(this, arguments);\n  },\n  captureQuery: function captureQuery() {\n    utils.consoleAlertOnce('captureQuery has been deprecated and will be removed in v2.0');\n    return this;\n  },\n  patchGlobal: function (cb) {\n    utils.consoleAlertOnce('patchGlobal has been deprecated and will be removed in v2.0; use install instead');\n    registerExceptionHandler(this, cb);\n    return this;\n  },\n  setUserContext: function setUserContext() {\n    utils.consoleAlertOnce('setUserContext has been deprecated and will be removed in v2.0; use setContext instead');\n    return this;\n  },\n  setExtraContext: function setExtraContext() {\n    utils.consoleAlertOnce('setExtraContext has been deprecated and will be removed in v2.0; use setContext instead');\n    return this;\n  },\n  setTagsContext: function setTagsContext() {\n    utils.consoleAlertOnce('setTagsContext has been deprecated and will be removed in v2.0; use setContext instead');\n    return this;\n  },\n});\nRaven.prototype.get_ident = Raven.prototype.getIdent;\n\n// Maintain old API compat, need to make sure arguments length is preserved\nfunction Client(dsn, options) {\n  if (dsn instanceof Client) return dsn;\n  var ravenInstance = new Raven();\n  return ravenInstance.config.apply(ravenInstance, arguments);\n}\nnodeUtil.inherits(Client, Raven);\n\n// Singleton-by-default but not strictly enforced\n// todo these extra export props are sort of an adhoc mess, better way to manage?\nvar defaultInstance = new Raven();\ndefaultInstance.Client = Client;\ndefaultInstance.patchGlobal = patchGlobal;\ndefaultInstance.version = require('../package.json').version;\ndefaultInstance.disableConsoleAlerts = utils.disableConsoleAlerts;\n\nmodule.exports = defaultInstance;\n\nfunction registerExceptionHandler(client, cb) {\n  var called = false;\n  process.on('uncaughtException', function (err) {\n    if (cb) { // bind event listeners only if a callback was supplied\n      var onLogged = function onLogged() {\n        called = false;\n        cb(true, err);\n      };\n\n      var onError = function onError() {\n        called = false;\n        cb(false, err);\n      };\n\n      if (called) {\n        client.removeListener('logged', onLogged);\n        client.removeListener('error', onError);\n        return cb(false, err);\n      }\n\n      client.once('logged', onLogged);\n      client.once('error', onError);\n\n      called = true;\n    }\n\n    var eventId = client.captureException(err);\n    return utils.consoleAlert('uncaughtException: ' + eventId);\n  });\n}\n\nfunction registerRejectionHandler(client, cb) {\n  process.on('unhandledRejection', function (reason) {\n    var eventId = client.captureException(reason, function (sendErr) {\n      cb && cb(!sendErr, reason);\n    });\n    return utils.consoleAlert('unhandledRejection: ' + eventId);\n  });\n}\n\nfunction patchGlobal(client, cb) {\n  // handle when the first argument is the callback, with no client specified\n  if (typeof client === 'function') {\n    cb = client;\n    client = new Client();\n    // first argument is a string DSN\n  } else if (typeof client === 'string') {\n    client = new Client(client);\n  }\n  // at the end, if we still don't have a Client, let's make one!\n  !(client instanceof Raven) && (client = new Client());\n\n  registerExceptionHandler(client, cb);\n}\n","/home/travis/build/npmtest/node-npmtest-raven/node_modules/raven/lib/parsers.js":"'use strict';\n\nvar cookie = require('cookie');\nvar urlParser = require('url');\nvar stringify = require('json-stringify-safe');\n\nvar utils = require('./utils');\n\nmodule.exports.parseText = function parseText(message, kwargs) {\n  kwargs = kwargs || {};\n  kwargs.message = message;\n\n  return kwargs;\n};\n\nmodule.exports.parseError = function parseError(err, kwargs, cb) {\n  utils.parseStack(err, function (frames) {\n    var name = err.name + '';\n    if (typeof kwargs.message === 'undefined') {\n      kwargs.message = name + ': ' + (err.message || '<no message>');\n    }\n    kwargs.exception = [{\n      type: name,\n      value: err.message,\n      stacktrace: {\n        frames: frames\n      }\n    }];\n\n    // Save additional error properties to `extra` under the error type (e.g. `extra.AttributeError`)\n    var extraErrorProps;\n    for (var key in err) {\n      if (err.hasOwnProperty(key)) {\n        if (key !== 'name' && key !== 'message' && key !== 'stack') {\n          extraErrorProps = extraErrorProps || {};\n          extraErrorProps[key] = err[key];\n        }\n      }\n    }\n    if (extraErrorProps) {\n      kwargs.extra = kwargs.extra || {};\n      kwargs.extra[name] = extraErrorProps;\n    }\n\n    for (var n = frames.length - 1; n >= 0; n--) {\n      if (frames[n].in_app) {\n        kwargs.culprit = kwargs.culprit || utils.getCulprit(frames[n]);\n        break;\n      }\n    }\n\n    cb(kwargs);\n  });\n};\n\nmodule.exports.parseRequest = function parseRequest(req, parseUser) {\n  var kwargs = {};\n\n  // headers:\n  //   node, express: req.headers\n  //   koa: req.header\n  var headers = req.headers || req.header || {};\n\n  // method:\n  //   node, express, koa: req.method\n  var method = req.method;\n\n  // host:\n  //   express: req.hostname in > 4 and req.host in < 4\n  //   koa: req.host\n  //   node: req.headers.host\n  var host = req.hostname || req.host || headers.host || '<no host>';\n\n  // protocol:\n  //   node: <n/a>\n  //   express, koa: req.protocol\n  var protocol = req.protocol === 'https' || req.secure || (req.socket || {}).encrypted ? 'https' : 'http';\n\n  // url (including path and query string):\n  //   node, express: req.originalUrl\n  //   koa: req.url\n  var originalUrl = req.originalUrl || req.url;\n\n  // absolute url\n  var absoluteUrl = protocol + '://' + host + originalUrl;\n\n  // query string:\n  //   node: req.url (raw)\n  //   express, koa: req.query\n  var query = req.query || urlParser.parse(originalUrl || '', true).query;\n\n  // cookies:\n  //   node, express, koa: req.headers.cookie\n  var cookies = cookie.parse(headers.cookie || '');\n\n  // body data:\n  //   node, express, koa: req.body\n  var data = req.body;\n  if (['GET', 'HEAD'].indexOf(method) === -1) {\n    if (typeof data === 'undefined') {\n      data = '<unavailable>';\n    }\n  }\n\n  if (data && typeof data !== 'string' && {}.toString.call(data) !== '[object String]') {\n    // Make sure the request body is a string\n    data = stringify(data);\n  }\n\n  // http interface\n  var http = {\n    method: method,\n    query_string: query,\n    headers: headers,\n    cookies: cookies,\n    data: data,\n    url: absoluteUrl\n  };\n\n  // expose http interface\n  kwargs.request = http;\n\n  // user: typically found on req.user in express/passport patterns\n  // five cases for parseUser value:\n  //   absent: grab only id, username, email from req.user\n  //   false: capture nothing\n  //   true: capture all keys from req.user\n  //   array: provided whitelisted keys to grab from req.user\n  //   function :: req -> user: custom parsing function\n  if (parseUser == null) parseUser = ['id', 'username', 'email'];\n  if (parseUser) {\n    var user = {};\n    if (typeof parseUser === 'function') {\n      user = parseUser(req);\n    } else if (req.user) {\n      if (parseUser === true) {\n        for (var key in req.user) {\n          if ({}.hasOwnProperty.call(req.user, key)) {\n            user[key] = req.user[key];\n          }\n        }\n      } else {\n        parseUser.forEach(function (fieldName) {\n          if ({}.hasOwnProperty.call(req.user, fieldName)) {\n            user[fieldName] = req.user[fieldName];\n          }\n        });\n      }\n    }\n\n    // client ip:\n    //   node: req.connection.remoteAddress\n    //   express, koa: req.ip\n    var ip = req.ip || req.connection && req.connection.remoteAddress;\n    if (ip) {\n      user.ip_address = ip;\n    }\n\n    kwargs.user = user;\n  }\n\n  return kwargs;\n};\n","/home/travis/build/npmtest/node-npmtest-raven/node_modules/raven/lib/utils.js":"'use strict';\n\nvar fs = require('fs');\nvar url = require('url');\nvar transports = require('./transports');\nvar path = require('path');\nvar lsmod = require('lsmod');\nvar stacktrace = require('stack-trace');\n\nvar ravenVersion = require('../package.json').version;\n\nvar protocolMap = {\n  http: 80,\n  https: 443\n};\n\nvar consoleAlerts = {};\n\nmodule.exports.disableConsoleAlerts = function disableConsoleAlerts() {\n  consoleAlerts = false;\n};\n\nmodule.exports.consoleAlert = function consoleAlert(msg) {\n  if (consoleAlerts) {\n    console.log('raven@' + ravenVersion + ' alert: ' + msg);\n  }\n};\n\nmodule.exports.consoleAlertOnce = function consoleAlertOnce(msg) {\n  if (consoleAlerts && !(msg in consoleAlerts)) {\n    consoleAlerts[msg] = true;\n    console.log('raven@' + ravenVersion + ' alert: ' + msg);\n  }\n};\n\nmodule.exports.extend = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n  return target;\n};\n\nmodule.exports.getAuthHeader = function getAuthHeader(timestamp, apiKey, apiSecret) {\n  var header = ['Sentry sentry_version=5'];\n  header.push('sentry_timestamp=' + timestamp);\n  header.push('sentry_client=raven-node/' + ravenVersion);\n  header.push('sentry_key=' + apiKey);\n  header.push('sentry_secret=' + apiSecret);\n  return header.join(', ');\n};\n\nmodule.exports.parseDSN = function parseDSN(dsn) {\n  if (!dsn) {\n    // Let a falsey value return false explicitly\n    return false;\n  }\n  try {\n    var parsed = url.parse(dsn),\n        response = {\n          protocol: parsed.protocol.slice(0, -1),\n          public_key: parsed.auth.split(':')[0],\n          private_key: parsed.auth.split(':')[1],\n          host: parsed.host.split(':')[0]\n        };\n\n    if (~response.protocol.indexOf('+')) {\n      response.protocol = response.protocol.split('+')[1];\n    }\n\n    if (!transports.hasOwnProperty(response.protocol)) {\n      throw new Error('Invalid transport');\n    }\n\n    var index = parsed.pathname.lastIndexOf('/');\n    response.path = parsed.pathname.substr(0, index + 1);\n    response.project_id = parsed.pathname.substr(index + 1);\n    response.port = ~~parsed.port || protocolMap[response.protocol] || 443;\n    return response;\n  } catch (e) {\n    throw new Error('Invalid Sentry DSN: ' + dsn);\n  }\n};\n\nmodule.exports.getCulprit = function getCulprit(frame) {\n  if (frame.module || frame.function) {\n    return (frame.module || '?') + ' at ' + (frame.function || '?');\n  }\n  return '<unknown>';\n};\n\nvar moduleCache;\nmodule.exports.getModules = function getModules() {\n  if (!moduleCache) {\n    moduleCache = lsmod();\n  }\n  return moduleCache;\n};\n\n\nvar LINES_OF_CONTEXT = 7;\n\nfunction getFunction(line) {\n  try {\n    return line.getFunctionName() ||\n      line.getTypeName() + '.' + (line.getMethodName() || '<anonymous>');\n  } catch (e) {\n    // This seems to happen sometimes when using 'use strict',\n    // stemming from `getTypeName`.\n    // [TypeError: Cannot read property 'constructor' of undefined]\n    return '<anonymous>';\n  }\n}\n\nvar mainModule = (require.main && require.main.filename && path.dirname(require.main.filename) || process.cwd()) + '/';\n\nfunction getModule(filename, base) {\n  if (!base) base = mainModule;\n\n  // It's specifically a module\n  var file = path.basename(filename, '.js');\n  filename = path.dirname(filename);\n  var n = filename.lastIndexOf('/node_modules/');\n  if (n > -1) {\n    // /node_modules/ is 14 chars\n    return filename.substr(n + 14).replace(/\\//g, '.') + ':' + file;\n  }\n  // Let's see if it's a part of the main module\n  // To be a part of main module, it has to share the same base\n  n = (filename + '/').lastIndexOf(base, 0);\n  if (n === 0) {\n    var module = filename.substr(base.length).replace(/\\//g, '.');\n    if (module) module += ':';\n    module += file;\n    return module;\n  }\n  return file;\n}\n\nfunction parseLines(lines, frame) {\n  frame.pre_context = lines.slice(Math.max(0, frame.lineno - (LINES_OF_CONTEXT + 1)), frame.lineno - 1);\n  frame.context_line = lines[frame.lineno - 1];\n  frame.post_context = lines.slice(frame.lineno, frame.lineno + LINES_OF_CONTEXT);\n}\n\nfunction parseStack(err, cb) {\n  var frames = [],\n      cache = {};\n\n  if (!err) {\n    return cb(frames);\n  }\n\n  var stack = stacktrace.parse(err);\n\n  // check to make sure that the stack is what we need it to be.\n  if (!stack || !Array.isArray(stack) || !stack.length || !stack[0].getFileName) {\n    // lol, stack is fucked\n    return cb(frames);\n  }\n\n  var callbacks = stack.length;\n\n  // Sentry requires the stack trace to be from oldest to newest\n  stack.reverse();\n\n  return stack.forEach(function (line, index) {\n    var frame = {\n          filename: line.getFileName() || '',\n          lineno: line.getLineNumber(),\n          colno: line.getColumnNumber(),\n          'function': getFunction(line),\n        },\n        isInternal = line.isNative() ||\n          frame.filename[0] !== '/' &&\n          frame.filename[0] !== '.' &&\n          frame.filename.indexOf(':\\\\') !== 1;\n\n    // in_app is all that's not an internal Node function or a module within node_modules\n    // note that isNative appears to return true even for node core libraries\n    // see https://github.com/getsentry/raven-node/issues/176\n    frame.in_app = !isInternal && frame.filename.indexOf('node_modules/') === -1;\n\n    // Extract a module name based on the filename\n    if (frame.filename) frame.module = getModule(frame.filename);\n\n    // internal Node files are not full path names. Ignore them.\n    if (isInternal) {\n      frames[index] = frame;\n      if (--callbacks === 0) cb(frames);\n      return;\n    }\n\n    if (frame.filename in cache) {\n      parseLines(cache[frame.filename], frame);\n      if (--callbacks === 0) cb(frames);\n      return;\n    }\n\n    fs.readFile(frame.filename, function (_err, file) {\n      if (!_err) {\n        file = file.toString().split('\\n');\n        cache[frame.filename] = file;\n        parseLines(file, frame);\n      }\n      frames[index] = frame;\n      if (--callbacks === 0) cb(frames);\n    });\n  });\n}\n\n// expose basically for testing because I don't know what I'm doing\nmodule.exports.parseStack = parseStack;\nmodule.exports.getModule = getModule;\n","/home/travis/build/npmtest/node-npmtest-raven/node_modules/raven/lib/transports.js":"'use strict';\n\nvar events = require('events');\nvar util = require('util');\n\nfunction Transport() {}\nutil.inherits(Transport, events.EventEmitter);\n\nvar http = require('http');\n\nfunction HTTPTransport(options) {\n  this.defaultPort = 80;\n  this.transport = http;\n  this.options = options || {};\n}\nutil.inherits(HTTPTransport, Transport);\nHTTPTransport.prototype.send = function (client, message, headers, eventId, cb) {\n  var options = {\n    hostname: client.dsn.host,\n    path: client.dsn.path + 'api/' + client.dsn.project_id + '/store/',\n    headers: headers,\n    method: 'POST',\n    port: client.dsn.port || this.defaultPort,\n    ca: client.ca\n  };\n  for (var key in this.options) {\n    if (this.options.hasOwnProperty(key)) {\n      options[key] = this.options[key];\n    }\n  }\n  var req = this.transport.request(options, function (res) {\n    res.setEncoding('utf8');\n    if (res.statusCode >= 200 && res.statusCode < 300) {\n      client.emit('logged', eventId);\n      cb && cb(null, eventId);\n    } else {\n      var reason = res.headers['x-sentry-error'];\n      var e = new Error('HTTP Error (' + res.statusCode + '): ' + reason);\n      e.response = res;\n      e.statusCode = res.statusCode;\n      e.reason = reason;\n      e.sendMessage = message;\n      e.requestHeaders = headers;\n      e.eventId = eventId;\n      client.emit('error', e);\n      cb && cb(e);\n    }\n    // force the socket to drain\n    var noop = function () {};\n    res.on('data', noop);\n    res.on('end', noop);\n  });\n\n  var cbFired = false;\n  req.on('error', function (e) {\n    client.emit('error', e);\n    if (!cbFired) {\n      cb && cb(e);\n      cbFired = true;\n    }\n  });\n  req.end(message);\n};\n\nvar https = require('https');\n\nfunction HTTPSTransport(options) {\n  this.defaultPort = 443;\n  this.transport = https;\n  this.options = options || {};\n}\nutil.inherits(HTTPSTransport, HTTPTransport);\n\nmodule.exports.http = new HTTPTransport();\nmodule.exports.https = new HTTPSTransport();\nmodule.exports.Transport = Transport;\nmodule.exports.HTTPTransport = HTTPTransport;\nmodule.exports.HTTPSTransport = HTTPSTransport;\n","/home/travis/build/npmtest/node-npmtest-raven/node_modules/raven/lib/breadcrumbs.js":"'use strict';\n\nvar util = require('util');\nvar utils = require('./utils.js');\n\n/**\n * Polyfill a method\n * @param obj object e.g. `document`\n * @param name method name present on object e.g. `addEventListener`\n * @param replacement replacement function\n * @param track {optional} record instrumentation to an array\n */\nfunction fill(obj, name, replacement, track) {\n  var orig = obj[name];\n  obj[name] = replacement(orig);\n  if (track) {\n    track.push([obj, name, orig]);\n  }\n}\n\nvar originals = [];\n\nvar wrappers = {\n  console: function (Raven) {\n    var wrapConsoleMethod = function (level) {\n      if (!(level in console)) {\n        return;\n      }\n\n      fill(console, level, function (originalConsoleLevel) {\n        var sentryLevel = level === 'warn'\n            ? 'warning'\n            : level;\n\n        return function () {\n          var args = [].slice.call(arguments);\n\n          Raven.captureBreadcrumb({\n            message: util.format.apply(null, args),\n            level: sentryLevel,\n            category: 'console'\n          });\n\n          originalConsoleLevel.apply(console, args);\n        };\n      }, originals);\n    };\n\n    ['debug', 'info', 'warn', 'error', 'log'].forEach(wrapConsoleMethod);\n  },\n\n  http: function (Raven) {\n    var http = require('http');\n    var OrigClientRequest = http.ClientRequest;\n    var ClientRequest = function (options, cb) {\n      // Note: this won't capture a breadcrumb if a response never comes\n      // It would be useful to know if that was the case, though, so\n      // todo: revisit to see if we can capture sth indicating response never came\n      // possibility: capture one breadcrumb for \"req sent\" and one for \"res recvd\"\n      // seems excessive but solves the problem and *is* strictly more information\n      // could be useful for weird response sequencing bug scenarios\n      OrigClientRequest.call(this, options, cb);\n\n      // We could just always reconstruct this from this.agent, this._headers, this.path, etc\n      // but certain other http-instrumenting libraries (like nock, which we use for tests) fail to\n      // maintain the guarantee that after calling OrigClientRequest, those fields will be populated\n      if (typeof options === 'string') {\n        this.__ravenBreadcrumbUrl = options;\n      } else {\n        this.__ravenBreadcrumbUrl = (options.protocol || '') + '//' +\n              (options.hostname || options.host || '') +\n              (options.path || '/');\n      }\n    };\n    util.inherits(ClientRequest, OrigClientRequest);\n\n    fill(ClientRequest.prototype, 'emit', function (origEmit) {\n      return function (evt, maybeResp) {\n        if (evt === 'response' && this.__ravenBreadcrumbUrl) {\n          if (!Raven.dsn || this.__ravenBreadcrumbUrl.indexOf(Raven.dsn.host) === -1) {\n            Raven.captureBreadcrumb({\n              type: 'http',\n              category: 'http',\n              data: {\n                method: this.method,\n                url: this.__ravenBreadcrumbUrl,\n                status_code: maybeResp.statusCode\n              }\n            });\n          }\n        }\n        return origEmit.apply(this, arguments);\n      };\n    });\n\n    fill(http, 'ClientRequest', function () {\n      return ClientRequest;\n    }, originals);\n\n    // http.request orig refs module-internal ClientRequest, not exported one, so\n    // it still points at orig ClientRequest after our monkeypatch; these reimpls\n    // just get that reference updated to use our new ClientRequest\n    fill(http, 'request', function () {\n      return function (options, cb) {\n        return new http.ClientRequest(options, cb);\n      };\n    }, originals);\n\n    fill(http, 'get', function () {\n      return function (options, cb) {\n        var req = http.request(options, cb);\n        req.end();\n        return req;\n      };\n    }, originals);\n  },\n\n  pg: function (Raven) {\n    // Using fill helper here is hard because of `this` binding\n    var pg = require('pg');\n    var origQuery = pg.Connection.prototype.query;\n    pg.Connection.prototype.query = function (text) {\n      Raven.captureBreadcrumb({\n        category: 'postgres',\n        message: text\n      });\n      origQuery.call(this, text);\n    };\n    originals.push([pg.Connection.prototype, 'query', origQuery]);\n  }\n};\n\nfunction instrument(key, Raven) {\n  try {\n    wrappers[key](Raven);\n    utils.consoleAlert('Enabled automatic breadcrumbs for ' + key);\n  } catch (e) {\n    // associated module not available\n  }\n}\n\nfunction restoreOriginals() {\n  var original;\n  // eslint-disable-next-line no-cond-assign\n  while (original = originals.shift()) {\n    var obj = original[0];\n    var name = original[1];\n    var orig = original[2];\n    obj[name] = orig;\n  }\n}\n\nmodule.exports = {\n  instrument: instrument,\n  restoreOriginals: restoreOriginals\n};\n","/home/travis/build/npmtest/node-npmtest-raven/node_modules/raven/lib/middleware/connect.js":"'use strict';\n\nvar Raven = require('../client');\nvar utils = require('../utils');\n\n// Legacy support\nvar connectMiddleware = function (client) {\n  return connectMiddleware.errorHandler(client);\n};\n\nvar getClient = function (clientOrDSN) {\n  // Raven is an instance, so use Raven.constructor for instanceof check\n  return clientOrDSN instanceof Raven.constructor ? clientOrDSN : new Raven.Client(clientOrDSN);\n};\n\n// Error handler. This should be the last item listed in middleware, but\n// before any other error handlers.\nconnectMiddleware.errorHandler = function (clientOrDSN) {\n  utils.consoleAlertOnce('top-level Raven.middleware.*.errorHandler has been deprecated and will be removed in v2.0; use Raven.errorHandler() instance method instead');\n  return getClient(clientOrDSN).errorHandler();\n};\n\n// Ensures asynchronous exceptions are routed to the errorHandler. This\n// should be the **first** item listed in middleware.\nconnectMiddleware.requestHandler = function (clientOrDSN) {\n  utils.consoleAlertOnce('top-level Raven.middleware.*.requestHandler has been deprecated and will be removed in v2.0; use Raven.requestHandler() instance method instead');\n  return getClient(clientOrDSN).requestHandler();\n};\n\n// for testing purposes only; not gonna worry about a nicer test exposure scheme since this code is going away soon\nconnectMiddleware.getClient = getClient;\n\nmodule.exports = connectMiddleware;\n"}